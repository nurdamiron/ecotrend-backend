version: '3.8'
services:
  api:
    build: .
    container_name: kaspi-api
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - KASPI_API_URL=${API_BASE_URL}
      - KASPI_ALLOWED_IP=${KASPI_ALLOWED_IP}
      - FIREBASE_DB_URL=${FIREBASE_DB_URL}
      - FIREBASE_SERVICE_ACCOUNT_PATH=/app/firebase-service-account.json
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FILE_PATH=${LOG_FILE_PATH}
    volumes:
      - ./logs:/app/logs
      - ./firebase-service-account.json:/app/firebase-service-account.json
    depends_on:
      - db
    networks:
      - app-network
  db:
    image: mysql:8.0
    container_name: kaspi-mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=nurda0101
      - MYSQL_DATABASE=ecotrend
      - MYSQL_USER=root
      - MYSQL_PASSWORD=nurda0101
    ports:
      - "3307:3306"  # Изменено с 3306:3306 для избежания конфликтов с локальным MySQL
    volumes:
      - mysql-data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
  nginx:
    image: nginx:alpine
    container_name: kaspi-nginx
    restart: always
    ports:
      - "8080:80"    # Уже хорошо - нестандартный порт
      - "8443:443"   # Уже хорошо - нестандартный порт
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/www:/var/www/html
    depends_on:
      - api
    networks:
      - app-network
  watchtower:
    image: containrrr/watchtower
    container_name: ecotrend-backend-watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 3600 --cleanup
    restart: always
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
volumes:
  mysql-data: